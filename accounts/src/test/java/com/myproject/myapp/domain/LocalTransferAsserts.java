package com.myproject.myapp.domain;

import static com.myproject.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LocalTransferAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalTransferAllPropertiesEquals(LocalTransfer expected, LocalTransfer actual) {
        assertLocalTransferAutoGeneratedPropertiesEquals(expected, actual);
        assertLocalTransferAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalTransferAllUpdatablePropertiesEquals(LocalTransfer expected, LocalTransfer actual) {
        assertLocalTransferUpdatableFieldsEquals(expected, actual);
        assertLocalTransferUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalTransferAutoGeneratedPropertiesEquals(LocalTransfer expected, LocalTransfer actual) {
        assertThat(expected)
            .as("Verify LocalTransfer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalTransferUpdatableFieldsEquals(LocalTransfer expected, LocalTransfer actual) {
        assertThat(expected)
            .as("Verify LocalTransfer relevant properties")
            .satisfies(e ->
                assertThat(e.getSenderAccountNumber()).as("check senderAccountNumber").isEqualTo(actual.getSenderAccountNumber())
            )
            .satisfies(e ->
                assertThat(e.getRecipientAccountNumber()).as("check recipientAccountNumber").isEqualTo(actual.getRecipientAccountNumber())
            )
            .satisfies(e -> assertThat(e.getRecipientBankName()).as("check recipientBankName").isEqualTo(actual.getRecipientBankName()))
            .satisfies(e ->
                assertThat(e.getRecipientBankBranch()).as("check recipientBankBranch").isEqualTo(actual.getRecipientBankBranch())
            )
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getTransactionDate()).as("check transactionDate").isEqualTo(actual.getTransactionDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocalTransferUpdatableRelationshipsEquals(LocalTransfer expected, LocalTransfer actual) {
        assertThat(expected)
            .as("Verify LocalTransfer relationships")
            .satisfies(e -> assertThat(e.getBankAccount()).as("check bankAccount").isEqualTo(actual.getBankAccount()));
    }
}
