package com.myproject.myapp.domain;

import static com.myproject.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InvestmentActivityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentActivityAllPropertiesEquals(InvestmentActivity expected, InvestmentActivity actual) {
        assertInvestmentActivityAutoGeneratedPropertiesEquals(expected, actual);
        assertInvestmentActivityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentActivityAllUpdatablePropertiesEquals(InvestmentActivity expected, InvestmentActivity actual) {
        assertInvestmentActivityUpdatableFieldsEquals(expected, actual);
        assertInvestmentActivityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentActivityAutoGeneratedPropertiesEquals(InvestmentActivity expected, InvestmentActivity actual) {
        assertThat(expected)
            .as("Verify InvestmentActivity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentActivityUpdatableFieldsEquals(InvestmentActivity expected, InvestmentActivity actual) {
        assertThat(expected)
            .as("Verify InvestmentActivity relevant properties")
            .satisfies(e -> assertThat(e.getInvestmentType()).as("check investmentType").isEqualTo(actual.getInvestmentType()))
            .satisfies(e -> assertThat(e.getActivityType()).as("check activityType").isEqualTo(actual.getActivityType()))
            .satisfies(e -> assertThat(e.getProjectName()).as("check projectName").isEqualTo(actual.getProjectName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e ->
                assertThat(e.getTargetAmount())
                    .as("check targetAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getTargetAmount())
            )
            .satisfies(e ->
                assertThat(e.getCurrentAmount())
                    .as("check currentAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getCurrentAmount())
            )
            .satisfies(e -> assertThat(e.getBondIssuer()).as("check bondIssuer").isEqualTo(actual.getBondIssuer()))
            .satisfies(e -> assertThat(e.getActivityDate()).as("check activityDate").isEqualTo(actual.getActivityDate()))
            .satisfies(e ->
                assertThat(e.getActivityAmount())
                    .as("check activityAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getActivityAmount())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getRiskLevel()).as("check riskLevel").isEqualTo(actual.getRiskLevel()))
            .satisfies(e -> assertThat(e.getLogin()).as("check login").isEqualTo(actual.getLogin()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(actual.getLastModifiedBy()))
            .satisfies(e -> assertThat(e.getLastModifiedDate()).as("check lastModifiedDate").isEqualTo(actual.getLastModifiedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInvestmentActivityUpdatableRelationshipsEquals(InvestmentActivity expected, InvestmentActivity actual) {
        // empty method
    }
}
