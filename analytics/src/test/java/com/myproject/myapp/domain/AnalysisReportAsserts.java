package com.myproject.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnalysisReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnalysisReportAllPropertiesEquals(AnalysisReport expected, AnalysisReport actual) {
        assertAnalysisReportAutoGeneratedPropertiesEquals(expected, actual);
        assertAnalysisReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnalysisReportAllUpdatablePropertiesEquals(AnalysisReport expected, AnalysisReport actual) {
        assertAnalysisReportUpdatableFieldsEquals(expected, actual);
        assertAnalysisReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnalysisReportAutoGeneratedPropertiesEquals(AnalysisReport expected, AnalysisReport actual) {
        assertThat(expected)
            .as("Verify AnalysisReport auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnalysisReportUpdatableFieldsEquals(AnalysisReport expected, AnalysisReport actual) {
        assertThat(expected)
            .as("Verify AnalysisReport relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getAnalysisType()).as("check analysisType").isEqualTo(actual.getAnalysisType()))
            .satisfies(e -> assertThat(e.getReportType()).as("check reportType").isEqualTo(actual.getReportType()))
            .satisfies(e -> assertThat(e.getGeneratedBy()).as("check generatedBy").isEqualTo(actual.getGeneratedBy()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnalysisReportUpdatableRelationshipsEquals(AnalysisReport expected, AnalysisReport actual) {
        assertThat(expected)
            .as("Verify AnalysisReport relationships")
            .satisfies(e -> assertThat(e.getDataCollection()).as("check dataCollection").isEqualTo(actual.getDataCollection()));
    }
}
