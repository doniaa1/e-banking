package com.myproject.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DataCollectionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataCollectionAllPropertiesEquals(DataCollection expected, DataCollection actual) {
        assertDataCollectionAutoGeneratedPropertiesEquals(expected, actual);
        assertDataCollectionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataCollectionAllUpdatablePropertiesEquals(DataCollection expected, DataCollection actual) {
        assertDataCollectionUpdatableFieldsEquals(expected, actual);
        assertDataCollectionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataCollectionAutoGeneratedPropertiesEquals(DataCollection expected, DataCollection actual) {
        assertThat(expected)
            .as("Verify DataCollection auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataCollectionUpdatableFieldsEquals(DataCollection expected, DataCollection actual) {
        assertThat(expected)
            .as("Verify DataCollection relevant properties")
            .satisfies(e -> assertThat(e.getLogin()).as("check login").isEqualTo(actual.getLogin()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()))
            .satisfies(e -> assertThat(e.getCollectedAt()).as("check collectedAt").isEqualTo(actual.getCollectedAt()))
            .satisfies(e -> assertThat(e.getDataType()).as("check dataType").isEqualTo(actual.getDataType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDataCollectionUpdatableRelationshipsEquals(DataCollection expected, DataCollection actual) {
        // empty method
    }
}
