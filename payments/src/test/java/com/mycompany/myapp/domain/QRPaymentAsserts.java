package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class QRPaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQRPaymentAllPropertiesEquals(QRPayment expected, QRPayment actual) {
        assertQRPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertQRPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQRPaymentAllUpdatablePropertiesEquals(QRPayment expected, QRPayment actual) {
        assertQRPaymentUpdatableFieldsEquals(expected, actual);
        assertQRPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQRPaymentAutoGeneratedPropertiesEquals(QRPayment expected, QRPayment actual) {
        assertThat(expected)
            .as("Verify QRPayment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQRPaymentUpdatableFieldsEquals(QRPayment expected, QRPayment actual) {
        assertThat(expected)
            .as("Verify QRPayment relevant properties")
            .satisfies(e -> assertThat(e.getQrCode()).as("check qrCode").isEqualTo(actual.getQrCode()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertQRPaymentUpdatableRelationshipsEquals(QRPayment expected, QRPayment actual) {
        assertThat(expected)
            .as("Verify QRPayment relationships")
            .satisfies(e -> assertThat(e.getPayment()).as("check payment").isEqualTo(actual.getPayment()));
    }
}
