package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BillPaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillPaymentAllPropertiesEquals(BillPayment expected, BillPayment actual) {
        assertBillPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertBillPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillPaymentAllUpdatablePropertiesEquals(BillPayment expected, BillPayment actual) {
        assertBillPaymentUpdatableFieldsEquals(expected, actual);
        assertBillPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillPaymentAutoGeneratedPropertiesEquals(BillPayment expected, BillPayment actual) {
        assertThat(expected)
            .as("Verify BillPayment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillPaymentUpdatableFieldsEquals(BillPayment expected, BillPayment actual) {
        assertThat(expected)
            .as("Verify BillPayment relevant properties")
            .satisfies(e -> assertThat(e.getBillReference()).as("check billReference").isEqualTo(actual.getBillReference()))
            .satisfies(e -> assertThat(e.getBillIssuer()).as("check billIssuer").isEqualTo(actual.getBillIssuer()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getPaymentDate()).as("check paymentDate").isEqualTo(actual.getPaymentDate()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBillPaymentUpdatableRelationshipsEquals(BillPayment expected, BillPayment actual) {
        assertThat(expected)
            .as("Verify BillPayment relationships")
            .satisfies(e -> assertThat(e.getPayment()).as("check payment").isEqualTo(actual.getPayment()));
    }
}
