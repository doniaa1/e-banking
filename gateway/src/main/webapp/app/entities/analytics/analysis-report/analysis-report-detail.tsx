import React, { useEffect } from 'react';
import { Link, useParams } from 'react-router-dom';
import { Button, Col, Row } from 'reactstrap';
import { TextFormat, Translate } from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { APP_DATE_FORMAT } from 'app/config/constants';
import { useAppDispatch, useAppSelector } from 'app/config/store';

import { getEntity } from './analysis-report.reducer';

export const AnalysisReportDetail = () => {
  const dispatch = useAppDispatch();

  const { id } = useParams<'id'>();

  useEffect(() => {
    dispatch(getEntity(id));
  }, []);

  const analysisReportEntity = useAppSelector(state => state.gateway.analysisReport.entity);
  return (
    <Row>
      <Col md="8">
        <h2 data-cy="analysisReportDetailsHeading">
          <Translate contentKey="gatewayApp.analyticsAnalysisReport.detail.title">AnalysisReport</Translate>
        </h2>
        <dl className="jh-entity-details">
          <dt>
            <span id="id">
              <Translate contentKey="global.field.id">ID</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.id}</dd>
          <dt>
            <span id="title">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.title">Title</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.title}</dd>
          <dt>
            <span id="createdAt">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.createdAt">Created At</Translate>
            </span>
          </dt>
          <dd>
            {analysisReportEntity.createdAt ? (
              <TextFormat value={analysisReportEntity.createdAt} type="date" format={APP_DATE_FORMAT} />
            ) : null}
          </dd>
          <dt>
            <span id="analysisType">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.analysisType">Analysis Type</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.analysisType}</dd>
          <dt>
            <span id="reportType">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.reportType">Report Type</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.reportType}</dd>
          <dt>
            <span id="generatedBy">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.generatedBy">Generated By</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.generatedBy}</dd>
          <dt>
            <span id="content">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.content">Content</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.content}</dd>
          <dt>
            <span id="status">
              <Translate contentKey="gatewayApp.analyticsAnalysisReport.status">Status</Translate>
            </span>
          </dt>
          <dd>{analysisReportEntity.status}</dd>
          <dt>
            <Translate contentKey="gatewayApp.analyticsAnalysisReport.dataCollection">Data Collection</Translate>
          </dt>
          <dd>{analysisReportEntity.dataCollection ? analysisReportEntity.dataCollection.name : ''}</dd>
        </dl>
        <Button tag={Link} to="/analysis-report" replace color="info" data-cy="entityDetailsBackButton">
          <FontAwesomeIcon icon="arrow-left" />{' '}
          <span className="d-none d-md-inline">
            <Translate contentKey="entity.action.back">Back</Translate>
          </span>
        </Button>
        &nbsp;
        <Button tag={Link} to={`/analysis-report/${analysisReportEntity.id}/edit`} replace color="primary">
          <FontAwesomeIcon icon="pencil-alt" />{' '}
          <span className="d-none d-md-inline">
            <Translate contentKey="entity.action.edit">Edit</Translate>
          </span>
        </Button>
      </Col>
    </Row>
  );
};

export default AnalysisReportDetail;
